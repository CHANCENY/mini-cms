"s:10669:\"<!DOCTYPE html>\n<html>\n                                     <head>\n                                       <meta name=\"title\" content=\"UG\">\n<meta name=\"description\" content=\"\">\n<meta name=\"author\" content=\"UG\">\n<link rel=\"icon\" type=\"image\/ico\" href=\"\/sites\/default\/files\/public\/18-September-2024\/1726643600Screenshot_from_2024_09_18_12_09_45_png.png\">\n<link rel=\"canonical\" href=\"\/development\">\n<meta charset=\"UTF-8\">\n\n                                       <script src=\"https:\/\/cdn.jsdelivr.net\/npm\/bootstrap@5.3.3\/dist\/js\/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"><\/script>\n<link href=\"https:\/\/cdn.jsdelivr.net\/npm\/bootstrap@5.3.3\/dist\/css\/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\n<link rel=\"stylesheet\" href=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/font-awesome\/6.5.2\/css\/all.min.css\" integrity=\"sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9\/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\">\n<script src=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/font-awesome\/6.5.2\/js\/all.min.js\" integrity=\"sha512-u3fPA7V8qQmhBPNT5quvaXVa1mnnLSXUep5PS1qo5NRzHwG19aHmNJnj1Q8hpA\/nBWZtZD4r4AX6YOt5ynLN2g==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"><\/script>\n<script type=\"text\/javascript\" src=\"\/themes\/global\/js\/quill\/quill.min.js\"><\/script>\n<script type=\"text\/javascript\" src=\"\/themes\/global\/js\/tinymce\/tinymce.min.js\"><\/script>\n<script type=\"text\/javascript\" src=\"\/themes\/global\/js\/main.js\"><\/script>\n<script src=\"https:\/\/code.jquery.com\/jquery-3.2.1.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr\/rE9\/Qpg6aAZGJwFDMVNA\/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"><\/script>\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/popper.js@1.12.9\/dist\/umd\/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K\/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"><\/script>\n<script src=\"https:\/\/cdn.jsdelivr.net\/npm\/bootstrap@4.0.0\/dist\/js\/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe\/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"><\/script>\n\n                                       <title>Development Caching<\/title>\n                                     <\/head>\n                                     <body class=\"body-content full-content-6335a6e9-2cd2-4914-ba9e-fc3dac-e12b29-5985-884747-i4844-373636-55322\">\n                                       <style>\n    .admin-nav nav,\n    .nav-item {\n        display: flex;\n    }\n\n    .admin-nav nav {\n        background-image: linear-gradient(\n                rgb(48, 48, 48) 13%,\n                rgb(30, 30, 30) 40%,\n                #0c0d11 86%\n        );\n        color: rgba(255, 255, 255, 0.6);\n        text-shadow: 0 -2px 0 black;\n        cursor: pointer;\n        box-shadow: 1px 2px 4px rgb(20, 20, 20), 0 4px 12px rgb(10, 10, 10);\n    }\n\n    .admin-nav .nav-item {\n        font-size: 0.8999rem;\n        line-height: 1rem;\n        align-items: center;\n        min-width: 120px;\n        justify-content: space-between;\n        transition: all 80ms ease;\n\n        &.active {\n            color: $primary;\n            text-shadow: 0 0 3px hsla(260, 100%, 70%, 0.7);\n        }\n\n        &:not(.active):hover {\n            color: rgba(255, 255, 255, 0.87);\n        }\n\n        &:hover > .icon .subicon {\n            height: 32px;\n            width: 32px;\n            border-radius: 32px;\n            top: -16px;\n            right: -16px;\n            border-color: white;\n        }\n\n        &:not(:first-of-type) {\n            border-left: 1px solid rgb(60, 60, 60);\n        }\n        &:not(:last-of-type) {\n            border-right: 0.1rem solid black;\n        }\n\n        a {\n            color: inherit;\n            text-decoration: none;\n            padding: 1ch;\n        }\n\n        .icon {\n            padding: 1ch;\n            position: relative;\n\n            .subicon {\n                text-shadow: none;\n                transition: all 40ms ease;\n                position: absolute;\n                top: -3px;\n                right: -3px;\n                background: red;\n                color: white;\n                box-shadow: 0 0 4px rgba(41, 41, 41, 0.405);\n                width: 18px;\n                height: 18px;\n                border-radius: 14px;\n                font-size: 0.7em;\n                font-weight: 700;\n                display: inline-grid;\n                place-items: center;\n                border: 2px solid mix(white, red);\n            }\n        }\n\n        .icon > svg {\n            max-width: 16px;\n        }\n    }\n\n    .admin-nav {\n        overflow: hidden;\n        background-color: #333;\n    }\n\n\n    .admin-nav.sticky {\n        position: fixed;\n        top: 0;\n        width: 100%;\n    }\n\n    .admin-nav.sticky + .content {\n        padding-top: 60px;\n    }\n\n    .user-profile {\n        padding: 15px;\n    }\n    .user-profile .card {\n        box-shadow: 0 1px 3px 0 rgba(0,0,0,.1), 0 1px 2px 0 rgba(0,0,0,.06);\n    }\n\n    .user-profile .card {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        min-width: 0;\n        word-wrap: break-word;\n        background-color: #fff;\n        background-clip: border-box;\n        border: 0 solid rgba(0,0,0,.125);\n        border-radius: .25rem;\n    }\n\n    .user-profile .card-body {\n        flex: 1 1 auto;\n        min-height: 1px;\n        padding: 1rem;\n    }\n\n    .user-profile .gutters-sm {\n        margin-right: -8px;\n        margin-left: -8px;\n    }\n\n    .user-profile .gutters-sm>.col, .gutters-sm>[class*=col-] {\n        padding-right: 8px;\n        padding-left: 8px;\n    }\n    .user-profile .mb-3, .my-3 {\n        margin-bottom: 1rem!important;\n    }\n\n    .user-profile .bg-gray-300 {\n        background-color: #e2e8f0;\n    }\n    .user-profile .h-100 {\n        height: 100%!important;\n    }\n    .user-profile .shadow-none {\n        box-shadow: none!important;\n    }\n\n<\/style>\n<div id=\"admin-nav\" class=\"admin-nav\">\n    <nav class=\"menu\" id=\"nav\">\n                                        \t<span class=\"nav-item \">\n\t\t<span class=\"icon\">\n\t\t\t<i data-feather=\"Profile\"><\/i>\n\t\t<\/span>\n\t\t<a href=\"\/user\" id=\"nav-item-user\" target=\"\" title=\"Profile\" class=\"nav-item\" aria-label=\"Profile\">\n            Profile        <\/a>\n\t<\/span>\n                                                    \t<span class=\"nav-item \">\n\t\t<span class=\"icon\">\n\t\t\t<i data-feather=\"Dashboard\"><\/i>\n\t\t<\/span>\n\t\t<a href=\"\/dashboard\" id=\"nav-item-dashboard\" target=\"\" title=\"Dashboard\" class=\"nav-item\" aria-label=\"Dashboard\">\n            Dashboard        <\/a>\n\t<\/span>\n                                                    \t<span class=\"nav-item \">\n\t\t<span class=\"icon\">\n\t\t\t<i data-feather=\"Register User to MiniCMS\"><\/i>\n\t\t<\/span>\n\t\t<a href=\"\/user\/register\" id=\"nav-item-register\" target=\"\" title=\"Register User to MiniCMS\" class=\"nav-item\" aria-label=\"Register\">\n            Register        <\/a>\n\t<\/span>\n                                                    \t<span class=\"nav-item \">\n\t\t<span class=\"icon\">\n\t\t\t<i data-feather=\"Logout User to MiniCMS\"><\/i>\n\t\t<\/span>\n\t\t<a href=\"\/user\/logout\" id=\"nav-item-logout\" target=\"\" title=\"Logout User to MiniCMS\" class=\"nav-item\" aria-label=\"Logout\">\n            Logout        <\/a>\n\t<\/span>\n                                                    \t<span class=\"nav-item \">\n\t\t<span class=\"icon\">\n\t\t\t<i data-feather=\"extend\"><\/i>\n\t\t<\/span>\n\t\t<a href=\"\/extension\/extend\" id=\"nav-item-extend\" target=\"\" title=\"extend\" class=\"nav-item\" aria-label=\"Extend\">\n            Extend        <\/a>\n\t<\/span>\n                                                    \t<span class=\"nav-item \">\n\t\t<span class=\"icon\">\n\t\t\t<i data-feather=\"People\"><\/i>\n\t\t<\/span>\n\t\t<a href=\"\/users\" id=\"nav-item-user\" target=\"\" title=\"People\" class=\"nav-item\" aria-label=\"People\">\n            People        <\/a>\n\t<\/span>\n                                                    \t<span class=\"nav-item \">\n\t\t<span class=\"icon\">\n\t\t\t<i data-feather=\"People\"><\/i>\n\t\t<\/span>\n\t\t<a href=\"\/system\/pages\" id=\"nav-item-pages\" target=\"\" title=\"People\" class=\"nav-item\" aria-label=\"Pages\">\n            Pages        <\/a>\n\t<\/span>\n                                                    \t<span class=\"nav-item \">\n\t\t<span class=\"icon\">\n\t\t\t<i data-feather=\"report errors\"><\/i>\n\t\t<\/span>\n\t\t<a href=\"\/reporting\/errors\" id=\"nav-item-extend\" target=\"\" title=\"report errors\" class=\"nav-item\" aria-label=\"Errors reports\">\n            Errors reports        <\/a>\n\t<\/span>\n                                                    \t<span class=\"nav-item active\">\n\t\t<span class=\"icon\">\n\t\t\t<i data-feather=\"Development\"><\/i>\n\t\t<\/span>\n\t\t<a href=\"\/development\" id=\"nav-item-development\" target=\"\" title=\"Development\" class=\"nav-item\" aria-label=\"Development\">\n            Development        <\/a>\n\t<\/span>\n                        <\/nav>\n<\/div>\n    <script>\n    window.onscroll = function() {myFunction()};\n\n    const navbar = document.getElementById(\"admin-nav\");\n    const sticky = navbar.offsetTop;\n\n    function myFunction() {\n        if (window.pageYOffset > sticky) {\n            navbar.classList.add(\"sticky\")\n        } else {\n            navbar.classList.remove(\"sticky\");\n        }\n    }\n<\/script>\n\n                                       <div class=\"container mt-lg-5 p-5\">\n    <div class=\"bordered rounded bg-light col-md-7 p-5\">\n        <form method=\"post\">\n            <div class=\"form-group\">\n                <label for=\"label\" class=\"for\">Max Age<\/label>\n                <label for=\"label\" style=\"display: none;\">Field ma-age<\/label><input value=\"7\" type=\"number\" name=\"ma-age\" id=\"label\" class=\"form-control\" aria-labelledby=\"label\">\n                <span>Time in hours for max-age header value<\/span>\n            <\/div>\n            <div class=\"form-group mt-3\">\n                <label for=\"caching\" class=\"for\">Mini Cache Server<\/label>\n                <label for=\"caching\" style=\"display: none;\">Field cache-setting<\/label><input checked type=\"checkbox\" class=\"form-check\" name=\"cache-setting\" id=\"caching\" aria-labelledby=\"caching\">\n            <\/div>\n            <div class=\"form-group mt-3\">\n                <label for=\"input-2\" style=\"display: none;\">Field caching-saver<\/label><input type=\"submit\" name=\"caching-saver\" value=\"Save Configuration\" class=\"btn btn-dark\" aria-labelledby=\"input-2\">\n            <\/div>\n        <\/form>\n    <\/div>\n<\/div>\n                                       <p>\n    copyrights reserved. @2024\n<\/p>\n\n                                       \n                                       \n                                     <\/body>\n                                     <\/html>\n\";"